/**
 * Code is auto-generated by Application Logic, DO NOT EDIT.
 * @version(2.0)
 */
const LCAPApplicationService = require('@sap/low-code-event-handler');
const detalleordencompra_Logic = require('./code/detalleordencompra-logic');

class Monitor_FacturasService extends LCAPApplicationService {
    async init() {

        //Consumir api noova
        this.on('noova_documents', async (req) => { // Puedes poner un valor por defecto para probar
        
            const apiUrl = `https://dev.noova.com.co/api-vph/api/FacProveedor/GetDocument?nvemp_nnit=860000452&nvfac_cont=923&nvfac_esta=A`;
        
            try {
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': 'Basic ODYwMDAwNDUyUmVjZV9JbnRlOlB3ZmZUOEg0Z2Y=',
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });
        
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error("‚ùå API externa no respondi√≥ OK:", {
                        status: response.status,
                        statusText: response.statusText,
                        body: errorText
                    });
                    return req.reject(response.status, `Error en la API externa: ${response.statusText}`);
                }
        
                const data = await response.json();
        
                // Devuelve solo el archivo, o todo si lo prefieres
                const nvdocFile = data?.lAttached?.[0]?.Nvdoc_file;
                if (!nvdocFile) return req.reject(404, "Nvdoc_file no encontrado");
        
                return { Nvdoc_file: nvdocFile };
        
            } catch (err) {
                console.error('üî• Error detallado al consumir la API externa:', {
                    message: err.message,
                    name: err.name,
                    stack: err.stack,
                    cause: err.cause
                });
                return req.reject(500, `Error interno al consumir la API externa: ${err.message}`);
            }
            
            
            
        });
        
        //Consumir API carvajal list invoices 
        this.on('consultar_documentos', async (req) => {
            const { noce, created } = req.data;
        
            const rawXML = `
        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                          xmlns:inv="http://invoice.carvajal.com/invoiceService/"
                          xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
                          xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <soapenv:Header>
                <wsse:Security>
                    <wsse:UsernameToken wsu:Id="UsernameToken-1">
                        <wsse:Username>ns_fe_integracion@colgas.com</wsse:Username>
                        <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8</wsse:Password>
                        <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">${noce}</wsse:Nonce>
                        <wsu:Created>${created}</wsu:Created>
                    </wsse:UsernameToken>
                </wsse:Security>
            </soapenv:Header>
            <soapenv:Body>
                <inv:CheckAvailableDocumentsRequest>
                    <companyId>890500726</companyId>
                    <initialDate>2025-01-01T00:00:00</initialDate>
                    <finalDate>2025-03-30T00:00:00</finalDate>
                    <resourceType>PDF,SIGNED_XML</resourceType>
                </inv:CheckAvailableDocumentsRequest>
            </soapenv:Body>
        </soapenv:Envelope>`;
        
            try {
                const response = await fetch("https://wscenflab.cen.biz/isows/InvoiceService?wsdl", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'text/xml'
                    },
                    body: rawXML
                });
        
                const result = await response.text();
                return result;
        
            } catch (error) {
                console.error("‚ùå Error en consulta SOAP:", error);
                return req.reject(500, `Error en consulta SOAP: ${error.message}`);
            }
        });

        this.on('extraer_documentos', async (req) => {
            const {noce, created, data, documentNumber, documentPrefix, documentType, senderIdentification } = req.data;

            const rawXML = `<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
                                            xmlns:inv="http://invoice.carvajal.com/invoiceService/" 
                                            xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" 
                                            xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                <soapenv:Header>
                                    <wsse:Security>
                                        <wsse:UsernameToken wsu:Id="UsernameToken-1">
                                            <wsse:Username>ns_fe_integracion@colgas.com</wsse:Username>
                                            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8</wsse:Password>
                                            <wsse:Nonce EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">${noce}</wsse:Nonce>
                                            <wsu:Created>${created}</wsu:Created>
                                        </wsse:UsernameToken>
                                    </wsse:Security>
                            <soapenv:Header/>
                            <soapenv:Body>
                                <inv:DownloadAvailableDocumentsRequest>
                                    <companyId>890500726</companyId>
                                    <resourceType>${data}</resourceType>
                                    <!--1 or more repetitions:-->
                                    <availableDocument>
                                        <!--Optional:-->
                                        <documentNumber>${documentNumber}</documentNumber>
                                        <!--Optional:-->
                                        <documentPrefix>${documentPrefix}</documentPrefix>
                                        <!--Optional:-->
                                        <documentType>${documentType}</documentType>
                                        <!--Optional:-->
                                        <downloadData>?</downloadData>
                                        <!--Optional:-->
                                        <senderIdentification>${senderIdentification}</senderIdentification>
                                    </availableDocument>
                                </inv:DownloadAvailableDocumentsRequest>
                            </soapenv:Body>
                            </soapenv:Envelope>`;
                            try {
                                const response = await fetch("https://wscenflab.cen.biz/isows/InvoiceService?wsdl", {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'text/xml'
                                    },
                                    body: rawXML
                                });
                        
                                const result = await response.text();
                                return result;
                        
                            } catch (error) {
                                console.error("‚ùå Error en consulta SOAP:", error);
                                return req.reject(500, `Error en consulta SOAP: ${error.message}`);
                            }
        });

        this.on(['CREATE', 'UPDATE'], 'Clientes', async (request, next) => {
            return clientes_Logic(request, next);
        });

        this.on('bulkInsertProveedores', async (req) => {
            let { proveedores } = req.data;
            
            // Verificar si 'proveedores' es un array JSON. Si no lo es, convertirlo en un array.
            if (!Array.isArray(proveedores)) {
                proveedores = [proveedores]; // Convertir a un array si es un solo objeto
            }
            
            // Verificar que 'proveedores' sea un array v√°lido
            if (proveedores.length === 0) {
                return req.reject(400, 'Debe enviar una lista de proveedores v√°lida.');
            }
        
            let proveedoresActualizados = 0;
            let proveedoresCreados = 0;
        
            try {
                const tx = cds.transaction(req);
        
                // Usar un bucle para procesar cada proveedor
                for (let i = 0; i < proveedores.length; i++) {
                    const proveedor = proveedores[i]; // Obtener el proveedor usando el √≠ndice
        
                    // Verificar que CodigoSap est√© presente
                    if (!proveedor.CodigoSap) {
                        return req.reject(400, `Proveedor con datos incorrectos (sin CodigoSap): ${JSON.stringify(proveedor)}`);
                    }
        
                    // Convertir todos los campos a string
                    const proveedorConvertido = {};
                    for (let key in proveedor) {
                        // Convertir cada campo del proveedor a string
                        proveedorConvertido[key] = String(proveedor[key]);
                    }
        
                    // Mostrar datos del proveedor para verificar que CodigoSap est√° presente
                    console.log(`Accediendo al proveedor con CodigoSap: ${proveedorConvertido.CodigoSap}`);
        
                    // Consultar si el proveedor ya existe en la base de datos
                    const existingProveedor = await tx.run(
                        SELECT.one.from(this.entities.Proveedores).where({ CodigoSap: proveedorConvertido.CodigoSap })
                    );
        
                    if (existingProveedor) {
                        // Si el proveedor existe, actualizarlo
                        await tx.run(
                            UPDATE(this.entities.Proveedores)
                                .set(proveedorConvertido)
                                .where({ CodigoSap: proveedorConvertido.CodigoSap })
                        );
                        proveedoresActualizados++;
                    } else {
                        // Si el proveedor no existe, insertarlo
                        await tx.run(
                            INSERT.into(this.entities.Proveedores).entries(proveedorConvertido)
                        );
                        proveedoresCreados++;
                    }
                }
        
                return { mensaje: `Se actualizaron ${proveedoresActualizados} proveedores y se crearon ${proveedoresCreados} proveedores.` };
        
            } catch (error) {
                // Capturar el error y devolver los datos en el mensaje de error
                console.error('Error al procesar proveedores:', error);
                return req.reject(500, `Error al procesar proveedores: ${error.message}, datos recibidos: ${JSON.stringify(proveedores)}`);
            }
        });
        
        this.on('bulkInsertOrdenCompra', async (req) => {
            const { OrdenCompra } = req.data;
        
            if (!Array.isArray(OrdenCompra) || OrdenCompra.length === 0) {
                return req.reject(400, 'Debe enviar una lista de ordenes de compra v√°lida.');
            }
        
            try {
                const tx = cds.transaction(req);
                await tx.run(INSERT.into(this.entities.OrdenCompra).entries(OrdenCompra));
        
                // ‚úÖ Aqu√≠ s√≠ se retorna algo
                return { mensaje: `Se insertaron ${OrdenCompra.length} Ordenes de compra.` };
            } catch (error) {
                console.error('Error al insertar ordenes de compra:', error);
                return req.reject(500, `Error al insertar ordenes de compra: ${error.message}`);
            }
        });

        this.on('prueba', async (req) =>{
            return ('hola');
        });

        module.exports = async function (srv) {
            const { Facturas } = srv.entities;
        
            srv.on('actualizarFactura', async (req) => {
                const { NumeroFactura, data } = req.data;
        
                if (!NumeroFactura) {
                    return req.error(400, 'El campo NumeroFactura es obligatorio');
                }
        
                const tx = srv.tx(req);
        
                // Verifica si la factura existe
                const factura = await tx.run(
                    SELECT.one.from(Facturas).where({ NumeroFactura })
                );
        
                if (!factura) {
                    return req.error(404, `Factura ${NumeroFactura} no encontrada`);
                }
        
                // Ejecuta el update con los datos enviados
                await tx.run(
                    UPDATE(Facturas).set(data).where({ NumeroFactura })
                );
        
                return `Factura ${NumeroFactura} actualizada correctamente`;
            });
        };
        
        

        // this.on('actualizarOrdenCompra', async (req) => {
        //     const { ID, FechaEmision, FechaRecepcion, NumeroOrden, NumeroFactura, DetalleOrdenCompra } = req.data;
        
        //     if (!NumeroOrden) {
        //         return req.reject(400, "El campo 'NumeroOrden' es obligatorio.");
        //     }
        
        //     const updateData = {
        //         FechaEmision: FechaEmision ?? "",
        //         FechaRecepcion: FechaRecepcion ?? "",
        //         NumeroOrden,
        //         NumeroFactura: NumeroFactura ?? ""
        //     };
        
        //     try {
        //         const tx = cds.tx(req);
        //         const result = await tx.run(UPDATE(this.entities.OrdenCompra).set(updateData).where({ ID }));
        
        //         if (result === 0) {
        //             return req.reject(404, "No se encontr√≥ la orden de compra para actualizar.");
        //         }
        
        //         // Si hay detalles, los actualizamos individualmente
        //         if (Array.isArray(DetalleOrdenCompra) && DetalleOrdenCompra.length > 0) {
        //             for (const detalle of DetalleOrdenCompra) {
        //                 await tx.run(UPDATE(this.entities.DetalleOrdenCompra).set(detalle).where({ NumeroOrden_NumeroOrden: NumeroOrden }));
        //             }
        //         }
        
        //         await tx.commit();
        //         return { message: "Orden de compra actualizada con √©xito" };
        
        //     } catch (error) {
        //         console.error("Error al actualizar la OrdenCompra:", error);
        //         return req.reject(500, "Hubo un error al actualizar la orden de compra.");
        //     }
        // });

        return super.init();
    }
}


module.exports = {
    Monitor_FacturasService
};